// PIC16F1516 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTOSC    // Oscillator Selection (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = OFF       // Watchdog Timer Enable (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable (PWRT disabled)
#pragma config MCLRE = ON       // MCLR Pin Function Select (MCLR/VPP pin function is MCLR)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable (Brown-out Reset enabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)
#pragma config IESO = ON        // Internal/External Switchover (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable (Fail-Safe Clock Monitor is enabled)

// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config VCAPEN = OFF     // Voltage Regulator Capacitor Enable bit (VCAP pin function disabled)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LPBOR = OFF      // Low-Power Brown Out Reset (Low-Power BOR is disabled)
#pragma config LVP = ON         // Low-Voltage Programming Enable (Low-voltage programming enabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include<pic16f1516.h>
#include<stdint.h>
#define _XTAL_FREQ 500000
void display(char a,char b);          //function declaration.
void main()
{
    uint8_t a=0,b=0,c=0,temp=0;       //local variables
    TRISB=TRISC=0;                    //PORTB & PORTC FOR LCD
    LATB=LATC=0;
    display(0x0E,0);                 //display ON ,cursor ON
    display(0x3C,0);                 //ACTIVATING second row of LCD display.  
    OPTION_REGbits.TMR0CS = 1;       //transition on TOCKI(counter pin)
    OPTION_REGbits.PSA = 1;          //prescalar ON or OFF(0->ON / 1->OFF )
   //OPTION_REGbits.PS =0b001;    //prescalar value,if prescalar is 2 then counter increases for every 2 clk pulses.
    OPTION_REGbits.TMR0SE=1;         // 1->increment on high to low / 0-> increment on low to high.
    TMR0 = 0;                        //counter value starts at 0 and overflow at 255.
    while(1)
    {
     temp = TMR0;                    //get the TMR0 value and stored it in temp
     a=temp%10;
     b=(temp/10)%10;
     c=temp/100;
     display(0x80,0);                //cursor at first row
     display(c+48,1);
     display(b+48,1);
     display(a+48,1); 
    }
}
void display(char a,char b)           //getting DATA in 'a' & MODE in 'b'.        
{
    LATC0=b;                          //command mode(RS->O COMMAND MODE ,RS->1 DATA MODE )
    LATB=a;                           //data is loaded.
    LATC1=1;                          //enable
    __delay_us(20);
    LATC1=0;                           //disable
    __delay_us(20);   
}


