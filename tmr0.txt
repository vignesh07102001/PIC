// PIC16F1516 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTOSC    // Oscillator Selection (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = OFF       // Watchdog Timer Enable (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable (PWRT disabled)
#pragma config MCLRE = ON       // MCLR Pin Function Select (MCLR/VPP pin function is MCLR)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable (Brown-out Reset enabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)
#pragma config IESO = ON        // Internal/External Switchover (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable (Fail-Safe Clock Monitor is enabled)

// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config VCAPEN = OFF     // Voltage Regulator Capacitor Enable bit (VCAP pin function disabled)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LPBOR = OFF      // Low-Power Brown Out Reset (Low-Power BOR is disabled)
#pragma config LVP = ON         // Low-Voltage Programming Enable (Low-voltage programming enabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include<pic16f1516.h>
#include<stdint.h>
void gpioinit();
void tmr0init();
void hrwintinit();
void interruptinit();
void main()
{
    gpioinit();            //GPIO init
    tmr0init();            //TMR0 interrupt init
    hrwintinit();          //Hardware interrupts init
    interruptinit();       //interrupt enable init
    while(1)
    {
     ;  
    }
}
void gpioinit()                 //init function.
{
   TRISB0 =1;                   //PORT B as input
   ANSB0=0;                     //digital input
   TRISC = 0;                   //PORTC as output
   LATC=0; 
}
void tmr0init()                 //TMR0 interrupt function
{
 OPTION_REGbits.TMR0CS = 0;     //clock signal source.(FOSC/4).FOSC=500KHZ
 OPTION_REGbits.PSA = 1;        //prescalar ON or OFF(0->ON / 1->OFF )  
 TMR0 = TMR0 + 256 - 125 +3 ;   //initially set the timer  for 1ms from 131 to 256 it gives 1 ms and after that it overflows at 256 and again starts from 131.
}
void hrwintinit()               //Hardware interrupt function
{
   INTCONbits.INTF=0;           //hardware interrupt flag is made 0 initially
   OPTION_REGbits.INTEDG=0;     //interrupt on falling edge.
   INTCONbits.TMR0IF = 0;         //TMR0 interrupt flag is disabled.
}
void interruptinit()             //all interrupts enable function
{
    ei();                          //global interrupt enable
    INTCONbits.INTE=1;             //hardware interrupt enabled(hardware interrupt is either '0' or '1' from a button but not POT values)
    INTCONbits.TMR0IE = 1;         //timer interrupt enable
   
}
void __interrupt() ISR(void)                 // subroutine code
{
    if(INTCONbits.TMR0IF)                   //check if it is TMR0 interrupt
    {
     static uint16_t count_t0 = 0;           //when decalred in static count_t0 varibale will always be 0.
     INTCONbits.TMR0IF = 0;                  //Timer flag is set 0 when it is 1.
     TMR0 = TMR0 + 256 - 125 +3 ;       // TMR0 value for 1ms(1000us/8us=125)2^8 is 256 so(256-125=131)so TMR0 starts from 131 to 256 gives 1ms and again overflows and starts at 131. 
     count_t0++;                             //incremented once.
     if(count_t0 == 500)                     //if 500 ms is reached.(1ms x 500 counts = 500 ms)
       {
         count_t0 =0;                        //start from the beginning.
         LATC7=!LATC7;                        //invert the LED connected in LATC7 pin.
       }
    }
    if(INTCONbits.INTF)                      //check if it is hardware interrupt
    {
        INTCONbits.INTF=0;                   //flag is made 0.
        LATC0=!LATC0;                        //invert LED connected to LATC0
    }   
}