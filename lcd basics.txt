
// PIC16F1934 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTOSC    // Oscillator Selection (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = OFF       // Watchdog Timer Enable (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable (PWRT disabled)
#pragma config MCLRE = ON       // MCLR Pin Function Select (MCLR/VPP pin function is MCLR)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Memory Code Protection (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable (Brown-out Reset enabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)
#pragma config IESO = ON        // Internal/External Switchover (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable (Fail-Safe Clock Monitor is enabled)

// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config VCAPEN = OFF     // Voltage Regulator Capacitor Enable (All VCAP pin functionality is disabled)
#pragma config PLLEN = ON       // PLL Enable (4x PLL enabled)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LVP = ON         // Low-Voltage Programming Enable (Low-voltage programming enabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include<stdint.h>

#define _XTAL_FREQ 500000
uint8_t i,j,count=0;
char a;
        
void main()
{
    TRISC=TRISD=0;
    LATC=LATD=0;
    TRISA0=1;                    //switch input
    ANSA0=0;
    LATD0=0;               //command mode(RS->O COMMAND MODE)
    LATC=0x0E;             //cursor on
    LATD1=1;               //enable
    __delay_us(20);
    LATD1=0;               //disable
    __delay_us(20);
   
     
    while(1)
    {
        if(RA0)
        {
            while(RA0);
            
         i=count%10;
         j=count/10;
             
        LATD0=0;                 //command mode
        LATC=0x80;               //placing cursor at first line at first character
        LATD1=1;                 //enable
        __delay_us(20);
        LATD1=0;                 //disable 
        __delay_us(20);
        
        LATD0=1;                    //data mode(RS->1 DATA MODE)
        LATC = j + 48 ;            //data to be send is loaded(48 is ASCII value of 0)
        LATD1=1;                    //enable
        __delay_us(20);
        LATD1=0;                     //disable.
        __delay_us(20);
        
        LATD0=0;                    //command mode
        LATC=0x81;                  //placing cursor at first line second character
        LATD1=1;                    //enable
        __delay_us(20);
        LATD1=0;                   //disable
        __delay_us(20);
        
         LATD0=1;                    //data mode
        LATC = i + 48 ;              //data to be send is loaded
        LATD1=1;                    //enable
        __delay_us(20);
        LATD1=0;                     //disable.
        __delay_us(20);
        
          count++;
          if(count==99)
              count=0;
        }
        
    }
    }
    
   
    